import { Bot, Context } from "grammy";
import { SocialMediaHandler } from "./src/bot/handlers/social-media-handler";
import { registerSocialMediaCommands } from "./src/bot/commands/social-media-commands";
import { isSocialMediaUrl, extractUrls, isProcessableUrl } from "./src/utils/url-utils";
import { botConfig } from "./config/bot.config";
import { imageSearchService } from "./src/services/image-search";
import { formatImageResult, formatImageError, formatNoImagesFound, getImageSearchHelp } from "./src/utils/image-utils";
import { aiService, configureAIService, memoryService } from "./src/services/ai";
import { configureDownloadService, getDownloadService } from "./src/services/download";
import { 
  formatAIResult, 
  formatAIError, 
  formatAINotConfigured, 
  getAIHelp, 
  validatePrompt, 
  sanitizePrompt,
  // Nuevas utilidades para memoria
  shouldUseMemory,
  getMemoryId,
  getMemoryType,
  formatAIResultWithMemory,
  createPromptWithContext,
  formatMemoryStats,
  getMemoryHelp
} from "./src/utils/ai-utils";

// Cache for bot owner ID
let cachedOwnerId: number | null = null;

// Helper function to get bot owner ID automatically
async function getBotOwnerId(bot: Bot): Promise<number | null> {
  if (cachedOwnerId) {
    return cachedOwnerId;
  }

  try {
    // Get bot information
    const botInfo = await bot.api.getMe();
    console.log(`ü§ñ Bot info: ${botInfo.first_name} (@${botInfo.username})`);
    
    // Try to get bot owner from webhook info or bot info
    // Note: Telegram doesn't directly provide owner ID, but we can try alternative methods
    
    // Method 1: Try to get from bot info (if available)
    if (botInfo.id) {
      console.log(`üìã Bot ID: ${botInfo.id}`);
    }
    
          // For now, we'll use the configured ownerId as fallback
      const configuredOwnerId = botConfig.options.ownerId;
      if (configuredOwnerId) {
        cachedOwnerId = configuredOwnerId;
        console.log(`üëë Owner ID configurado: ${cachedOwnerId}`);
        return cachedOwnerId;
      }
    
    console.log('‚ö†Ô∏è No se pudo obtener el owner ID autom√°ticamente. Usando configuraci√≥n manual.');
    return null;
  } catch (error) {
    console.error('‚ùå Error obteniendo informaci√≥n del bot:', error);
    return null;
  }
}

// Helper function to check if user is whitelisted
async function isUserAuthorized(ctx: Context): Promise<boolean> {
  // Check if whitelist is enabled
  if (!botConfig.options.enableWhitelist) {
    return true; // If whitelist is disabled, allow all users
  }

  const userId = ctx.from?.id;
  if (!userId) {
    return false;
  }

  // Special handling for private chats
  if (ctx.chat?.type === 'private') {
    // In private chats, allow if:
    // 1. User is in whitelist, OR
    // 2. No owner is configured yet (first-time setup)
    const whitelistedUsers = botConfig.options.whitelistedUsers || [];
    const isWhitelisted = whitelistedUsers.includes(userId);
    const hasOwner = botConfig.options.ownerId || cachedOwnerId;
    
    if (isWhitelisted) {
      return true; // User is authorized
    }
    
    if (!hasOwner) {
      // No owner configured yet - allow for initial setup
      console.log(`üîß Configuraci√≥n inicial: permitiendo acceso a ${ctx.from?.first_name} (${userId})`);
      return true;
    }
    
    return false; // User not in whitelist and owner is configured
  }

  // For group chats, check whitelist first
  const whitelistedUsers = botConfig.options.whitelistedUsers || [];
  const isWhitelisted = whitelistedUsers.includes(userId);
  
  // If user is whitelisted, allow immediately
  if (isWhitelisted) {
    return true;
  }

  // If user is not whitelisted, check if owner is present in group (if required)
  if (botConfig.options.requireOwnerInGroup && ctx.chat && (ctx.chat.type === 'group' || ctx.chat.type === 'supergroup')) {
    try {
      // Try to get owner ID automatically first
      let ownerId = await getBotOwnerId(bot);
      
      // Fallback to configured ownerId
      if (!ownerId) {
        ownerId = botConfig.options.ownerId;
      }
      
      if (!ownerId) {
        console.log('‚ö†Ô∏è Owner ID no est√° configurado. Usa /setowner para configurarlo autom√°ticamente');
        return false;
      }
      
      const chatMember = await ctx.api.getChatMember(ctx.chat.id, ownerId);
      const ownerPresent = chatMember.status !== 'left' && chatMember.status !== 'kicked';
      
      if (ownerPresent) {
        console.log(`‚úÖ Usuario no autorizado permitido (${ctx.from?.first_name}) - Owner presente en grupo`);
        return true;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è No se pudo verificar la presencia del owner en el grupo:', error);
      return false;
    }
  }

  return false;
}

// Helper function to check if processable URLs should be processed even for unauthorized users
async function shouldProcessProcessableUrls(ctx: Context): Promise<boolean> {
  // If whitelist is disabled, always process
  if (!botConfig.options.enableWhitelist) {
    return true;
  }

  const userId = ctx.from?.id;
  if (!userId) {
    return false;
  }

  // For private chats, use normal authorization
  if (ctx.chat?.type === 'private') {
    return await isUserAuthorized(ctx);
  }

  // For group chats, check if user is whitelisted
  const whitelistedUsers = botConfig.options.whitelistedUsers || [];
  const isWhitelisted = whitelistedUsers.includes(userId);
  
  // If user is whitelisted, allow processing
  if (isWhitelisted) {
    return true;
  }

  // If user is not whitelisted, check if owner is present in group
  if (ctx.chat && (ctx.chat.type === 'group' || ctx.chat.type === 'supergroup')) {
    try {
      let ownerId = await getBotOwnerId(bot);
      if (!ownerId) {
        ownerId = botConfig.options.ownerId;
      }
      
      if (!ownerId) {
        return false; // No owner configured
      }
      
      const chatMember = await ctx.api.getChatMember(ctx.chat.id, ownerId);
      const ownerPresent = chatMember.status !== 'left' && chatMember.status !== 'kicked';
      
      if (ownerPresent) {
        console.log(`üîó Procesando URL de usuario no autorizado (${ctx.from?.first_name}) - Owner presente en grupo`);
        return true;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Error verificando presencia del owner para procesamiento de URLs:', error);
    }
  }

  return false;
}

// Create a new bot using configuration
const bot = new Bot(botConfig.token);

// Configurar el servicio de IA si est√° habilitado
if (botConfig.options.enableAI) {
  configureAIService(botConfig.options.ai);
}

// Configurar el servicio de descarga si est√° habilitado
if (botConfig.options.enableDownloadFallback) {
  configureDownloadService(botConfig.options.downloadFallback);
  // Mostrar estad√≠sticas de sitios soportados
  (async () => {
    try {
      const { getSupportedSitesStats } = await import("./src/utils/url-utils");
      const stats = getSupportedSitesStats();
      console.log(`üöÄ Universal download service enabled - Supporting ${stats.totalDomains} domains from ${stats.totalExtractors} yt-dlp extractors!`);
    } catch (error) {
      console.log('üöÄ Universal download service enabled - Supporting 1000+ sites!');
    }
  })();
}

// Registrar comandos de redes sociales si est√° habilitado
if (botConfig.options.enableSocialMedia) {
  registerSocialMediaCommands(bot);
}

// Comando para configurar el owner autom√°ticamente
bot.command("setowner", async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) {
    await ctx.reply("‚ùå No se pudo obtener tu ID de usuario");
    return;
  }
  
  // Solo permitir en chats privados
  if (ctx.chat?.type !== 'private') {
    await ctx.reply("‚ùå Este comando solo funciona en chats privados con el bot");
    return;
  }
  
  // Check if user is authorized (allows first-time setup)
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    await ctx.reply("‚ùå No tienes permisos para configurar el owner");
    return;
  }
  
  // Set the owner ID
  cachedOwnerId = userId;
  botConfig.options.ownerId = userId;
  
  // Add to whitelist if not already there
  if (!botConfig.options.whitelistedUsers?.includes(userId)) {
    botConfig.options.whitelistedUsers = botConfig.options.whitelistedUsers || [];
    botConfig.options.whitelistedUsers.push(userId);
  }
  
  await ctx.reply(`‚úÖ Owner configurado exitosamente!\nüëë Tu ID: ${userId}\nüîê Has sido agregado a la whitelist`, {
    disable_notification: botConfig.options.silentReplies,
  });
  
  console.log(`üëë Owner configurado: ${userId} (${ctx.from?.first_name})`);
});

// Comando para verificar el estado de autorizaci√≥n del usuario
bot.command("auth", async (ctx) => {
  const userId = ctx.from?.id;
  const chatType = ctx.chat?.type;
  
  if (!userId) {
    await ctx.reply("‚ùå No se pudo obtener tu ID de usuario");
    return;
  }
  
  const whitelistedUsers = botConfig.options.whitelistedUsers || [];
  const isWhitelisted = whitelistedUsers.includes(userId);
  const hasOwner = botConfig.options.ownerId || cachedOwnerId;
  
  let statusMessage = `üîê <b>Estado de Autorizaci√≥n</b>\n\n`;
  statusMessage += `üë§ <b>Usuario:</b> ${ctx.from?.first_name}\n`;
  statusMessage += `üÜî <b>ID:</b> ${userId}\n`;
  statusMessage += `üí¨ <b>Chat:</b> ${chatType}\n`;
  statusMessage += `üîê <b>Whitelist:</b> ${isWhitelisted ? '‚úÖ Autorizado' : '‚ùå No autorizado'}\n`;
  statusMessage += `üëë <b>Owner configurado:</b> ${hasOwner ? '‚úÖ S√≠' : '‚ùå No'}\n`;
  
  if (chatType === 'private') {
    if (!hasOwner) {
      statusMessage += `\nüí° <b>Configuraci√≥n inicial:</b> Puedes usar /setowner para configurar el owner`;
    } else if (!isWhitelisted) {
      statusMessage += `\n‚ùå <b>Acceso denegado:</b> No est√°s en la whitelist`;
    } else {
      statusMessage += `\n‚úÖ <b>Acceso permitido:</b> Est√°s autorizado`;
    }
  } else {
    if (!isWhitelisted) {
      statusMessage += `\n‚ùå <b>Acceso denegado:</b> No est√°s en la whitelist`;
    } else if (botConfig.options.requireOwnerInGroup) {
      statusMessage += `\nüë• <b>Verificaci√≥n de grupo:</b> Se requiere que el owner est√© presente`;
    } else {
      statusMessage += `\n‚úÖ <b>Acceso permitido:</b> Est√°s autorizado`;
    }
  }
  
  await ctx.reply(statusMessage, {
    parse_mode: "HTML",
    disable_notification: botConfig.options.silentReplies,
  });
});

// Comando para mostrar informaci√≥n del bot y owner
bot.command("botinfo", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  try {
    const botInfo = await bot.api.getMe();
    const ownerId = await getBotOwnerId(bot);
    
    let infoMessage = `ü§ñ <b>Informaci√≥n del Bot</b>\n\n`;
    infoMessage += `üìù <b>Nombre:</b> ${botInfo.first_name}\n`;
    infoMessage += `üîó <b>Username:</b> @${botInfo.username}\n`;
    infoMessage += `üÜî <b>Bot ID:</b> ${botInfo.id}\n`;
    
    if (ownerId) {
      infoMessage += `üëë <b>Owner ID:</b> ${ownerId}\n`;
    } else {
      infoMessage += `‚ö†Ô∏è <b>Owner ID:</b> No configurado\n`;
    }
    
    infoMessage += `\nüîê <b>Whitelist:</b> ${botConfig.options.enableWhitelist ? '‚úÖ Habilitada' : '‚ùå Deshabilitada'}\n`;
    infoMessage += `üë• <b>Owner en grupo:</b> ${botConfig.options.requireOwnerInGroup ? '‚úÖ Requerido' : '‚ùå No requerido'}\n`;
    
    if (botConfig.options.whitelistedUsers?.length) {
      infoMessage += `üìã <b>Usuarios autorizados:</b> ${botConfig.options.whitelistedUsers.length}\n`;
    }
    
    await ctx.reply(infoMessage, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
  } catch (error) {
    await ctx.reply("‚ùå Error obteniendo informaci√≥n del bot");
  }
});

// Comando para mostrar informaci√≥n del grupo y verificar presencia del owner
bot.command("groupinfo", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  try {
    const chat = ctx.chat;
    if (!chat) {
      await ctx.reply("‚ùå No se pudo obtener informaci√≥n del chat");
      return;
    }
    
    let infoMessage = `üìã <b>Informaci√≥n del Grupo</b>\n\n`;
    infoMessage += `üìù <b>Nombre:</b> ${chat.title || 'Chat privado'}\n`;
    infoMessage += `üÜî <b>Chat ID:</b> ${chat.id}\n`;
    infoMessage += `üí¨ <b>Tipo:</b> ${chat.type}\n`;
    
    if (chat.username) {
      infoMessage += `üîó <b>Username:</b> @${chat.username}\n`;
    }
    
    // Verificar presencia del owner
    const ownerId = await getBotOwnerId(bot) || botConfig.options.ownerId;
    if (ownerId && (chat.type === 'group' || chat.type === 'supergroup')) {
      try {
        const chatMember = await ctx.api.getChatMember(chat.id, ownerId);
        const ownerStatus = chatMember.status;
        const ownerPresent = ownerStatus !== 'left' && ownerStatus !== 'kicked';
        
        infoMessage += `\nüëë <b>Owner (${ownerId}):</b> ${ownerPresent ? '‚úÖ Presente' : '‚ùå No presente'}\n`;
        infoMessage += `üìä <b>Estado:</b> ${ownerStatus}\n`;
        
        if (ownerPresent) {
          infoMessage += `\nüí° <b>Links de redes sociales:</b> Se procesar√°n incluso de usuarios no autorizados`;
        } else {
          infoMessage += `\n‚ö†Ô∏è <b>Links de redes sociales:</b> Solo usuarios autorizados`;
        }
             } catch (error) {
         const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
         infoMessage += `\n‚ùå <b>Error verificando owner:</b> ${errorMessage}`;
       }
    } else if (!ownerId) {
      infoMessage += `\n‚ö†Ô∏è <b>Owner:</b> No configurado`;
    }
    
    // Informaci√≥n del usuario actual
    const currentUser = ctx.from;
    if (currentUser) {
      const whitelistedUsers = botConfig.options.whitelistedUsers || [];
      const isWhitelisted = whitelistedUsers.includes(currentUser.id);
      
      infoMessage += `\n\nüë§ <b>Usuario actual:</b> ${currentUser.first_name}\n`;
      infoMessage += `üÜî <b>ID:</b> ${currentUser.id}\n`;
      infoMessage += `üîê <b>Autorizado:</b> ${isWhitelisted ? '‚úÖ S√≠' : '‚ùå No'}`;
    }
    
    await ctx.reply(infoMessage, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
  } catch (error) {
    await ctx.reply("‚ùå Error obteniendo informaci√≥n del grupo");
  }
});

// Comando para buscar im√°genes
bot.command("img", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  try {
    const args = ctx.message?.text?.split(' ').slice(1);
    
    if (!args || args.length === 0) {
      const helpMessage = getImageSearchHelp();
      await ctx.reply(helpMessage, {
        parse_mode: "HTML",
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    const query = args.join(' ').trim();
    
    if (query.length < 2) {
      await ctx.reply("‚ùå La b√∫squeda debe tener al menos 2 caracteres", {
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    if (query.length > 100) {
      await ctx.reply("‚ùå La b√∫squeda es demasiado larga (m√°ximo 100 caracteres)", {
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    // Mostrar mensaje de carga
    const loadingMessage = await ctx.reply("üîç Buscando im√°genes...", {
      disable_notification: botConfig.options.silentReplies,
    });

    // Buscar imagen aleatoria
    const imageResult = await imageSearchService.getRandomImage(query, {
      maxResults: 50,
      safeSearch: 'moderate'
    });

    // Eliminar mensaje de carga
    try {
      await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);
    } catch (error) {
      console.log('No se pudo eliminar el mensaje de carga:', error);
    }

    if (!imageResult) {
      const noResultsMessage = formatNoImagesFound(query);
      await ctx.reply(noResultsMessage.message, {
        parse_mode: "HTML",
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    // Formatear el resultado
    const formattedResult = formatImageResult(imageResult, query);
    
    // Enviar un solo mensaje con toda la informaci√≥n y la URL para que Telegram muestre el preview
    await ctx.reply(formattedResult.message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });

    // Log de la b√∫squeda
    if (botConfig.options.logMessages) {
      console.log(`üñºÔ∏è Imagen encontrada para "${query}" por ${ctx.from?.first_name} (${ctx.from?.id})`);
    }

  } catch (error) {
    console.error('Error en comando /img:', error);
    
    const args = ctx.message?.text?.split(' ').slice(1);
    const query = args?.join(' ').trim() || 'b√∫squeda';
    const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
    
    const formattedError = formatImageError(query, errorMessage);
    await ctx.reply(formattedError.message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

// Comando para buscar im√°genes sin filtro de seguridad
bot.command("imgx", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  try {
    const args = ctx.message?.text?.split(' ').slice(1);
    
    if (!args || args.length === 0) {
      const helpMessage = `üñºÔ∏è <b>Comando /imgx - B√∫squeda de Im√°genes Sin Filtro</b>\n\n` +
                         `<b>Uso:</b>\n` +
                         `<code>/imgx [t√©rmino de b√∫squeda]</code>\n\n` +
                         `<b>‚ö†Ô∏è ADVERTENCIA:</b>\n` +
                         `Este comando busca im√°genes <b>SIN filtro de seguridad</b>.\n` +
                         `Los resultados pueden contener contenido adulto o expl√≠cito.\n\n` +
                         `<b>Ejemplos:</b>\n` +
                         `‚Ä¢ <code>/imgx arte</code>\n` +
                         `‚Ä¢ <code>/imgx fotograf√≠a</code>\n` +
                         `‚Ä¢ <code>/imgx naturaleza</code>\n\n` +
                         `<b>Diferencias con /img:</b>\n` +
                         `‚Ä¢ <code>/img</code> - SafeSearch habilitado (contenido filtrado)\n` +
                         `‚Ä¢ <code>/imgx</code> - SafeSearch deshabilitado (sin filtros)\n\n` +
                         `<b>Nota:</b> Usa este comando con responsabilidad.`;
      
      await ctx.reply(helpMessage, {
        parse_mode: "HTML",
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    const query = args.join(' ').trim();
    
    if (query.length < 2) {
      await ctx.reply("‚ùå La b√∫squeda debe tener al menos 2 caracteres", {
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    if (query.length > 100) {
      await ctx.reply("‚ùå La b√∫squeda es demasiado larga (m√°ximo 100 caracteres)", {
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    // Mostrar mensaje de carga con advertencia
    const loadingMessage = await ctx.reply("üîç Buscando im√°genes sin filtro...", {
      disable_notification: botConfig.options.silentReplies,
    });

    // Buscar imagen aleatoria SIN SafeSearch
    const imageResult = await imageSearchService.getRandomImage(query, {
      maxResults: 50,
      safeSearch: 'off'  // ‚ö†Ô∏è SafeSearch desactivado
    });

    // Eliminar mensaje de carga
    try {
      await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);
    } catch (error) {
      console.log('No se pudo eliminar el mensaje de carga:', error);
    }

    if (!imageResult) {
      const noResultsMessage = formatNoImagesFound(query);
      await ctx.reply(noResultsMessage.message, {
        parse_mode: "HTML",
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    // Formatear el resultado (usa la misma funci√≥n que /img)
    const formattedResult = formatImageResult(imageResult, query);
    
    // Agregar advertencia al mensaje
    const warningMessage = `‚ö†Ô∏è` + formattedResult.message;
    
    // Enviar un solo mensaje con toda la informaci√≥n y la URL para que Telegram muestre el preview
    await ctx.reply(warningMessage, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });

    // Log de la b√∫squeda
    if (botConfig.options.logMessages) {
      console.log(`üñºÔ∏è Imagen SIN FILTRO encontrada para "${query}" por ${ctx.from?.first_name} (${ctx.from?.id})`);
    }

  } catch (error) {
    console.error('Error en comando /imgx:', error);
    
    const args = ctx.message?.text?.split(' ').slice(1);
    const query = args?.join(' ').trim() || 'b√∫squeda';
    const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
    
    const formattedError = formatImageError(query, errorMessage);
    await ctx.reply(formattedError.message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

// Comando para usar IA con Together AI (ahora con memoria)
bot.command("ia", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  // Verificar si el servicio de IA est√° habilitado
  if (!botConfig.options.enableAI) {
    await ctx.reply("‚ùå El servicio de IA est√° deshabilitado", {
      disable_notification: botConfig.options.silentReplies,
    });
    return;
  }
  
  try {
    const args = ctx.message?.text?.split(' ').slice(1);
    
    if (!args || args.length === 0) {
      const helpMessage = getAIHelp();
      await ctx.reply(helpMessage, {
        parse_mode: "HTML",
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    const prompt = args.join(' ').trim();
    
    // Validar el prompt
    const validation = validatePrompt(prompt);
    if (!validation.valid) {
      await ctx.reply(`‚ùå ${validation.error}`, {
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    // Verificar si el servicio est√° configurado
    if (!aiService.isConfigured()) {
      const notConfiguredMessage = formatAINotConfigured();
      await ctx.reply(notConfiguredMessage.message, {
        parse_mode: "HTML",
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }

    // Mostrar mensaje de carga
    const loadingMessage = await ctx.reply("ü§ñ Generando respuesta...", {
      disable_notification: botConfig.options.silentReplies,
    });

    // === L√ìGICA DE MEMORIA ===
    const chatId = ctx.chat?.id;
    const chatType = ctx.chat?.type;
    const userId = ctx.from?.id;
    const username = ctx.from?.username;
    
    let hasMemoryContext = false;
    let finalPrompt = sanitizePrompt(prompt);
    
    // Verificar si usar memoria (grupos y chats privados)
    if (chatId && chatType && userId && shouldUseMemory(chatId, chatType, userId)) {
      const memoryId = getMemoryId(chatId, chatType, userId);
      const memoryType = getMemoryType(chatType);
      
      if (memoryId && memoryType) {
        try {
          // Obtener contexto de memoria
          const memoryContext = await memoryService.getMemoryContext(memoryId, memoryType);
          
          if (memoryContext) {
            finalPrompt = createPromptWithContext(finalPrompt, memoryContext);
            hasMemoryContext = true;
            const contextDesc = memoryType === 'group' ? 'grupo' : 'usuario';
            console.log(`üß† Usando memoria para ${contextDesc} ${memoryId}: ${memoryContext.split('\n').length - 2} entradas`);
          }
          
          // Agregar entrada actual a memoria (async, no esperamos)
          memoryService.addEntry(memoryId, memoryType, prompt, userId, username).catch(error => {
            console.error('Error agregando entrada a memoria:', error);
          });
        } catch (error) {
          console.error('Error procesando memoria:', error);
          // Continuar sin memoria en caso de error
        }
      }
    }
    
    // Generar respuesta de IA (con o sin contexto de memoria)
    const aiResponse = await aiService.generateResponse({
      prompt: finalPrompt,
    });

    // Eliminar mensaje de carga
    try {
      await ctx.api.deleteMessage(ctx.chat.id, loadingMessage.message_id);
    } catch (error) {
      console.log('No se pudo eliminar el mensaje de carga:', error);
    }

    // Formatear y enviar respuesta (con indicador de memoria si aplica)
    const formattedResult = formatAIResultWithMemory(
      aiResponse, 
      prompt, 
      hasMemoryContext,
      botConfig.options.ai.showWaterConsumption
    );
    
    await ctx.reply(formattedResult.message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });

    // Log de la consulta
    if (botConfig.options.logMessages) {
      const memoryIndicator = hasMemoryContext ? ' (con memoria)' : '';
      console.log(`ü§ñ IA consultada por ${ctx.from?.first_name} (${ctx.from?.id}) - Tokens: ${formattedResult.tokensUsed}${memoryIndicator}`);
    }

  } catch (error) {
    console.error('Error en comando /ia:', error);
    
    const args = ctx.message?.text?.split(' ').slice(1);
    const prompt = args?.join(' ').trim() || 'consulta';
    const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
    
    const formattedError = formatAIError(prompt, errorMessage);
    await ctx.reply(formattedError.message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

// ========================================
// COMANDOS DE MEMORIA
// ========================================

// Comando para ver estad√≠sticas de memoria
bot.command("memory_stats", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  const chatId = ctx.chat?.id;
  const chatType = ctx.chat?.type;
  const userId = ctx.from?.id;
  
  if (!chatId || !chatType || !userId) {
    await ctx.reply("‚ùå No se pudo obtener informaci√≥n del chat o usuario", {
      disable_notification: botConfig.options.silentReplies,
    });
    return;
  }
  
  if (!shouldUseMemory(chatId, chatType, userId)) {
    await ctx.reply("üí° La memoria no est√° disponible para este tipo de chat", {
      disable_notification: botConfig.options.silentReplies,
    });
    return;
  }
  
  try {
    const memoryId = getMemoryId(chatId, chatType, userId);
    const memoryType = getMemoryType(chatType);
    
    if (!memoryId || !memoryType) {
      await ctx.reply("‚ùå No se pudo obtener identificador de memoria", {
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }
    
    const stats = await memoryService.getMemoryStats(memoryId, memoryType);
    const formattedStats = formatMemoryStats(stats, chatType);
    
    await ctx.reply(formattedStats, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
    
  } catch (error) {
    console.error('Error obteniendo estad√≠sticas de memoria:', error);
    await ctx.reply("‚ùå Error obteniendo estad√≠sticas de memoria", {
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

// Comando para limpiar memoria
bot.command("memory_clear", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  const chatId = ctx.chat?.id;
  const chatType = ctx.chat?.type;
  const userId = ctx.from?.id;
  
  if (!chatId || !chatType || !userId) {
    await ctx.reply("‚ùå No se pudo obtener informaci√≥n del chat o usuario", {
      disable_notification: botConfig.options.silentReplies,
    });
    return;
  }
  
  if (!shouldUseMemory(chatId, chatType, userId)) {
    await ctx.reply("üí° La memoria no est√° disponible para este tipo de chat", {
      disable_notification: botConfig.options.silentReplies,
    });
    return;
  }
  
  try {
    const memoryId = getMemoryId(chatId, chatType, userId);
    const memoryType = getMemoryType(chatType);
    
    if (!memoryId || !memoryType) {
      await ctx.reply("‚ùå No se pudo obtener identificador de memoria", {
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }
    
    await memoryService.clearMemory(memoryId, memoryType);
    
    const context = memoryType === 'group' ? 'del grupo' : 'personal';
    await ctx.reply(`üóëÔ∏è <b>Memoria ${context} limpiada</b>\n\nTodas las conversaciones anteriores han sido eliminadas.`, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
    
    if (botConfig.options.logMessages) {
      const contextDesc = memoryType === 'group' ? 'grupo' : 'usuario';
      console.log(`üóëÔ∏è Memoria limpiada para ${contextDesc} ${memoryId} por ${ctx.from?.first_name} (${ctx.from?.id})`);
    }
    
  } catch (error) {
    console.error('Error limpiando memoria:', error);
    await ctx.reply("‚ùå Error limpiando memoria", {
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

// Comando para mostrar ayuda sobre memoria
bot.command("memory_help", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  const helpMessage = getMemoryHelp();
  await ctx.reply(helpMessage, {
    parse_mode: "HTML",
    disable_notification: botConfig.options.silentReplies,
  });
});

// Comando para mostrar estad√≠sticas del cach√© de videos
bot.command("video_cache_stats", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  try {
    const { videoCacheService } = await import("./src/services/video-cache");
    const stats = videoCacheService.getStats();
    
    let message = `üì¶ <b>Estad√≠sticas del Cach√© de Videos</b>\n\n`;
    message += `üìä <b>General:</b>\n`;
    message += `‚Ä¢ <b>Videos cacheados:</b> ${stats.totalEntries}\n`;
    message += `‚Ä¢ <b>Cache hits:</b> ${stats.cacheHits}\n`;
    message += `‚Ä¢ <b>Cache misses:</b> ${stats.cacheMisses}\n`;
    message += `‚Ä¢ <b>Ratio de aciertos:</b> ${(stats.hitRatio * 100).toFixed(1)}%\n`;
    message += `‚Ä¢ <b>Tama√±o total:</b> ${stats.totalSize > 0 ? (stats.totalSize / (1024 * 1024)).toFixed(1) + ' MB' : 'N/A'}\n\n`;
    
    if (Object.keys(stats.platformStats).length > 0) {
      message += `üé• <b>Por plataforma:</b>\n`;
      Object.entries(stats.platformStats)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 10)
        .forEach(([platform, count]) => {
          message += `‚Ä¢ ${platform}: ${count}\n`;
        });
      message += `\n`;
    }
    
    if (stats.oldestEntry > 0) {
      const oldestDate = new Date(stats.oldestEntry);
      const newestDate = new Date(stats.newestEntry);
      message += `üìÖ <b>Fechas:</b>\n`;
      message += `‚Ä¢ <b>M√°s antiguo:</b> ${oldestDate.toLocaleDateString()}\n`;
      message += `‚Ä¢ <b>M√°s reciente:</b> ${newestDate.toLocaleDateString()}\n`;
    }
    
    await ctx.reply(message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
    
  } catch (error) {
    console.error('Error obteniendo estad√≠sticas del cach√©:', error);
    await ctx.reply("‚ùå Error obteniendo estad√≠sticas del cach√©", {
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

// Comando para limpiar el cach√© de videos
bot.command("video_cache_clear", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  try {
    const { videoCacheService } = await import("./src/services/video-cache");
    
    // Solo el owner puede limpiar completamente el cach√©
    const userId = ctx.from?.id;
    const isOwner = userId === botConfig.options.ownerId;
    
    if (!isOwner) {
      await ctx.reply("‚ùå Solo el owner puede limpiar el cach√© completamente", {
        disable_notification: botConfig.options.silentReplies,
      });
      return;
    }
    
    const statsBefore = videoCacheService.getStats();
    videoCacheService.clearCache();
    
    await ctx.reply(`üóëÔ∏è <b>Cach√© de videos limpiado</b>\n\nSe eliminaron ${statsBefore.totalEntries} entradas del cach√©.`, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
    
  } catch (error) {
    console.error('Error limpiando cach√©:', error);
    await ctx.reply("‚ùå Error limpiando cach√©", {
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

// Comando para limpiar entradas antiguas del cach√©
bot.command("video_cache_cleanup", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  try {
    const { videoCacheService } = await import("./src/services/video-cache");
    
    // Limpiar entradas m√°s antiguas que 30 d√≠as
    const removedCount = await videoCacheService.cleanup({
      olderThanDays: 30,
      maxEntries: 500
    }, bot.api);
    
    if (removedCount > 0) {
      await ctx.reply(`üßπ <b>Limpieza completada</b>\n\nSe eliminaron ${removedCount} entradas antiguas del cach√©.`, {
        parse_mode: "HTML",
        disable_notification: botConfig.options.silentReplies,
      });
    } else {
      await ctx.reply("‚úÖ No se encontraron entradas antiguas para eliminar", {
        disable_notification: botConfig.options.silentReplies,
      });
    }
    
  } catch (error) {
    console.error('Error en limpieza del cach√©:', error);
    await ctx.reply("‚ùå Error en limpieza del cach√©", {
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

// Comando para mostrar estad√≠sticas de sitios soportados
bot.command("supported_sites", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  try {
    const { getSupportedSitesStats } = await import("./src/utils/url-utils");
    const stats = getSupportedSitesStats();
    
    let message = `üåê <b>Sitios Soportados por yt-dlp</b>\n\n`;
    message += `üìä <b>Estad√≠sticas:</b>\n`;
    message += `‚Ä¢ <b>Extractores:</b> ${stats.totalExtractors}\n`;
    message += `‚Ä¢ <b>Dominios √∫nicos:</b> ${stats.totalDomains}\n\n`;
    
    message += `üì± <b>Ejemplos principales:</b>\n`;
    const examples = ['youtube.com', 'kick.com', 'vimeo.com', 'dailymotion.com', 'twitch.tv', 
                     'facebook.com', 'instagram.com', 'tiktok.com', 'twitter.com', 'reddit.com',
                     'soundcloud.com', 'bandcamp.com', 'bilibili.com', 'bbc.co.uk', 'cnn.com'];
    
    examples.forEach(domain => {
      if (stats.domains.includes(domain)) {
        message += `‚úÖ ${domain}\n`;
      }
    });
    
    message += `\nüí° <b>Nota:</b> Solo se muestran algunos ejemplos principales. El bot detecta autom√°ticamente URLs de todos los ${stats.totalDomains} dominios soportados.`;
    
    await ctx.reply(message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
    
  } catch (error) {
    console.error('Error obteniendo estad√≠sticas de sitios soportados:', error);
    await ctx.reply("‚ùå Error obteniendo estad√≠sticas de sitios soportados", {
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

// Comando para configurar el manejo de mensajes
bot.command("message_config", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  const args = ctx.message?.text?.split(' ').slice(1);
  
  if (!args || args.length === 0) {
    // Mostrar configuraci√≥n actual
    const config = botConfig.options.messageManagement;
    
    let message = `üóÇÔ∏è <b>Configuraci√≥n de Mensajes</b>\n\n`;
    message += `üìã <b>Estado actual:</b>\n`;
    message += `‚Ä¢ <b>Auto-eliminar originales:</b> ${config?.autoDeleteOriginalMessage ? '‚úÖ S√≠' : '‚ùå No'}\n`;
    message += `‚Ä¢ <b>Delay de eliminaci√≥n:</b> ${(config?.deleteDelay || 2000) / 1000} segundos\n\n`;
    
    if (config?.autoDeleteOriginalMessage) {
      message += `üîÑ <b>Comportamiento actual:</b>\n`;
      message += `Los mensajes con URLs se eliminan autom√°ticamente despu√©s de procesar el contenido.\n\n`;
    } else {
      message += `üíæ <b>Comportamiento actual:</b>\n`;
      message += `Los mensajes con URLs se mantienen (no se eliminan).\n\n`;
    }
    
    message += `üí° <b>Comandos disponibles:</b>\n`;
    message += `‚Ä¢ <code>/message_config autodelete on</code> - Habilitar auto-eliminaci√≥n\n`;
    message += `‚Ä¢ <code>/message_config autodelete off</code> - Deshabilitar auto-eliminaci√≥n\n`;
    message += `‚Ä¢ <code>/message_config delay [segundos]</code> - Cambiar delay (ej: 3)\n`;
    message += `‚Ä¢ <code>/message_config toggle</code> - Alternar auto-eliminaci√≥n\n`;
    
    await ctx.reply(message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
    return;
  }
  
  const command = args[0].toLowerCase();
  
  switch (command) {
    case 'autodelete':
      if (args[1] === 'on') {
        if (!botConfig.options.messageManagement) {
          botConfig.options.messageManagement = { autoDeleteOriginalMessage: true, deleteDelay: 2000 };
        } else {
          botConfig.options.messageManagement.autoDeleteOriginalMessage = true;
        }
        await ctx.reply("‚úÖ Auto-eliminaci√≥n de mensajes originales habilitada", {
          disable_notification: botConfig.options.silentReplies,
        });
      } else if (args[1] === 'off') {
        if (!botConfig.options.messageManagement) {
          botConfig.options.messageManagement = { autoDeleteOriginalMessage: false, deleteDelay: 2000 };
        } else {
          botConfig.options.messageManagement.autoDeleteOriginalMessage = false;
        }
        await ctx.reply("‚ùå Auto-eliminaci√≥n de mensajes originales deshabilitada", {
          disable_notification: botConfig.options.silentReplies,
        });
      } else {
        await ctx.reply("‚ùå Usa: on o off", {
          disable_notification: botConfig.options.silentReplies,
        });
      }
      break;
      
    case 'toggle':
      if (!botConfig.options.messageManagement) {
        botConfig.options.messageManagement = { autoDeleteOriginalMessage: true, deleteDelay: 2000 };
      } else {
        botConfig.options.messageManagement.autoDeleteOriginalMessage = !botConfig.options.messageManagement.autoDeleteOriginalMessage;
      }
      
      const newState = botConfig.options.messageManagement.autoDeleteOriginalMessage;
      await ctx.reply(`${newState ? '‚úÖ' : '‚ùå'} Auto-eliminaci√≥n ${newState ? 'habilitada' : 'deshabilitada'}`, {
        disable_notification: botConfig.options.silentReplies,
      });
      break;
      
    case 'delay':
      if (args[1] && !isNaN(Number(args[1]))) {
        const seconds = Number(args[1]);
        if (seconds < 1 || seconds > 60) {
          await ctx.reply("‚ùå El delay debe estar entre 1 y 60 segundos", {
            disable_notification: botConfig.options.silentReplies,
          });
          return;
        }
        
        if (!botConfig.options.messageManagement) {
          botConfig.options.messageManagement = { autoDeleteOriginalMessage: false, deleteDelay: seconds * 1000 };
        } else {
          botConfig.options.messageManagement.deleteDelay = seconds * 1000;
        }
        
        await ctx.reply(`‚úÖ Delay de eliminaci√≥n cambiado a ${seconds} segundos`, {
          disable_notification: botConfig.options.silentReplies,
        });
      } else {
        await ctx.reply("‚ùå Especifica un n√∫mero de segundos v√°lido (1-60)", {
          disable_notification: botConfig.options.silentReplies,
        });
      }
      break;
      
    default:
      await ctx.reply("‚ùå Comando no v√°lido. Usa /message_config sin par√°metros para ver ayuda.", {
        disable_notification: botConfig.options.silentReplies,
      });
  }
});

// Comando para configurar la atribuci√≥n del usuario
bot.command("user_attribution", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  const args = ctx.message?.text?.split(' ').slice(1);
  
  if (!args || args.length === 0) {
    // Mostrar configuraci√≥n actual
    const config = botConfig.options.userAttribution;
    
    let message = `üë§ <b>Configuraci√≥n de Atribuci√≥n</b>\n\n`;
    message += `üìã <b>Estado actual:</b>\n`;
    message += `‚Ä¢ <b>Habilitado:</b> ${config.enabled ? '‚úÖ S√≠' : '‚ùå No'}\n`;
    message += `‚Ä¢ <b>Emoji:</b> ${config.emoji}\n`;
    message += `‚Ä¢ <b>Mostrar username:</b> ${config.showUsername ? '‚úÖ S√≠' : '‚ùå No'}\n`;
    message += `‚Ä¢ <b>Mostrar nombre:</b> ${config.showFirstName ? '‚úÖ S√≠' : '‚ùå No'}\n`;
    message += `‚Ä¢ <b>Posici√≥n:</b> ${config.position === 'top' ? 'Arriba' : 'Abajo'}\n\n`;
    
    if (config.enabled) {
      const user = ctx.from;
      if (user) {
        let exampleName = '';
        if (config.showUsername && user.username) {
          exampleName = `@${user.username}`;
        } else if (config.showFirstName && user.first_name) {
          exampleName = user.first_name;
        } else {
          exampleName = `Usuario ${user.id}`;
        }
        message += `üìã <b>Ejemplo con tu usuario:</b>\n`;
        message += `${config.emoji} <i>${exampleName}</i>\n\n`;
      }
    }
    
    message += `üí° <b>Comandos disponibles:</b>\n`;
    message += `‚Ä¢ <code>/user_attribution on</code> - Habilitar atribuci√≥n\n`;
    message += `‚Ä¢ <code>/user_attribution off</code> - Deshabilitar atribuci√≥n\n`;
    message += `‚Ä¢ <code>/user_attribution emoji [emoji]</code> - Cambiar emoji (ej: üîó)\n`;
    message += `‚Ä¢ <code>/user_attribution position top</code> - Mostrar arriba\n`;
    message += `‚Ä¢ <code>/user_attribution position bottom</code> - Mostrar abajo\n`;
    message += `‚Ä¢ <code>/user_attribution username on/off</code> - Mostrar @username\n`;
    message += `‚Ä¢ <code>/user_attribution name on/off</code> - Mostrar nombre\n`;
    
    await ctx.reply(message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
    return;
  }
  
  const command = args[0].toLowerCase();
  
  switch (command) {
    case 'on':
      botConfig.options.userAttribution.enabled = true;
      await ctx.reply("‚úÖ Atribuci√≥n de usuario habilitada", {
        disable_notification: botConfig.options.silentReplies,
      });
      break;
      
    case 'off':
      botConfig.options.userAttribution.enabled = false;
      await ctx.reply("‚ùå Atribuci√≥n de usuario deshabilitada", {
        disable_notification: botConfig.options.silentReplies,
      });
      break;
      
    case 'emoji':
      if (args[1]) {
        botConfig.options.userAttribution.emoji = args[1];
        await ctx.reply(`‚úÖ Emoji cambiado a: ${args[1]}`, {
          disable_notification: botConfig.options.silentReplies,
        });
      } else {
        await ctx.reply("‚ùå Especifica un emoji. Ejemplo: /user_attribution emoji üîó", {
          disable_notification: botConfig.options.silentReplies,
        });
      }
      break;
      
    case 'position':
      if (args[1] === 'top' || args[1] === 'bottom') {
        botConfig.options.userAttribution.position = args[1];
        await ctx.reply(`‚úÖ Posici√≥n cambiada a: ${args[1] === 'top' ? 'Arriba' : 'Abajo'}`, {
          disable_notification: botConfig.options.silentReplies,
        });
      } else {
        await ctx.reply("‚ùå Posici√≥n v√°lida: top o bottom", {
          disable_notification: botConfig.options.silentReplies,
        });
      }
      break;
      
    case 'username':
      if (args[1] === 'on') {
        botConfig.options.userAttribution.showUsername = true;
        await ctx.reply("‚úÖ Mostrar @username habilitado", {
          disable_notification: botConfig.options.silentReplies,
        });
      } else if (args[1] === 'off') {
        botConfig.options.userAttribution.showUsername = false;
        await ctx.reply("‚ùå Mostrar @username deshabilitado", {
          disable_notification: botConfig.options.silentReplies,
        });
      } else {
        await ctx.reply("‚ùå Usa: on o off", {
          disable_notification: botConfig.options.silentReplies,
        });
      }
      break;
      
    case 'name':
      if (args[1] === 'on') {
        botConfig.options.userAttribution.showFirstName = true;
        await ctx.reply("‚úÖ Mostrar nombre habilitado", {
          disable_notification: botConfig.options.silentReplies,
        });
      } else if (args[1] === 'off') {
        botConfig.options.userAttribution.showFirstName = false;
        await ctx.reply("‚ùå Mostrar nombre deshabilitado", {
          disable_notification: botConfig.options.silentReplies,
        });
      } else {
        await ctx.reply("‚ùå Usa: on o off", {
          disable_notification: botConfig.options.silentReplies,
        });
      }
      break;
      
    default:
      await ctx.reply("‚ùå Comando no v√°lido. Usa /user_attribution sin par√°metros para ver ayuda.", {
        disable_notification: botConfig.options.silentReplies,
      });
  }
});

// Comando para configurar el comportamiento del cach√©
bot.command("cache_config", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  const args = ctx.message?.text?.split(' ').slice(1);
  
  if (!args || args.length === 0) {
    // Mostrar configuraci√≥n actual
    const showIndicator = botConfig.options.videoCache?.showCacheIndicator ?? false;
    
    let message = `‚öôÔ∏è <b>Configuraci√≥n del Cach√©</b>\n\n`;
    message += `üìã <b>Estado actual:</b>\n`;
    message += `‚Ä¢ <b>Mostrar indicador de cach√©:</b> ${showIndicator ? '‚úÖ S√≠' : '‚ùå No'}\n\n`;
    
    if (showIndicator) {
      message += `üîÑ <b>Comportamiento actual:</b>\n`;
      message += `Los videos del cach√© muestran "üîÑ Contenido desde cach√©"\n\n`;
    } else {
      message += `üé≠ <b>Comportamiento actual:</b>\n`;
      message += `Los videos del cach√© se ven exactamente igual que la primera vez\n\n`;
    }
    
    message += `üí° <b>Comandos disponibles:</b>\n`;
    message += `‚Ä¢ <code>/cache_config show</code> - Mostrar indicador de cach√©\n`;
    message += `‚Ä¢ <code>/cache_config hide</code> - Ocultar indicador (transparente)\n`;
    message += `‚Ä¢ <code>/cache_config toggle</code> - Alternar configuraci√≥n\n`;
    
    await ctx.reply(message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
    return;
  }
  
  const command = args[0].toLowerCase();
  let newValue: boolean;
  let actionText: string;
  
  switch (command) {
    case 'show':
      newValue = true;
      actionText = 'Los videos del cach√© mostrar√°n "üîÑ Contenido desde cach√©"';
      break;
    case 'hide':
      newValue = false;
      actionText = 'Los videos del cach√© se ver√°n exactamente igual que la primera vez';
      break;
    case 'toggle':
      newValue = !(botConfig.options.videoCache?.showCacheIndicator ?? false);
      actionText = newValue ? 
        'Los videos del cach√© mostrar√°n "üîÑ Contenido desde cach√©"' :
        'Los videos del cach√© se ver√°n exactamente igual que la primera vez';
      break;
    default:
      await ctx.reply("‚ùå Comando no v√°lido. Usa: show, hide, o toggle", {
        disable_notification: botConfig.options.silentReplies,
      });
      return;
  }
  
  // Actualizar configuraci√≥n
  if (!botConfig.options.videoCache) {
    botConfig.options.videoCache = { showCacheIndicator: false };
  }
  botConfig.options.videoCache.showCacheIndicator = newValue;
  
  await ctx.reply(`‚úÖ <b>Configuraci√≥n actualizada</b>\n\n${actionText}`, {
    parse_mode: "HTML",
    disable_notification: botConfig.options.silentReplies,
  });
});

// Comando para mostrar informaci√≥n sobre procesamiento de videos
bot.command("video_processing_info", async (ctx) => {
  const isAuthorized = await isUserAuthorized(ctx);
  if (!isAuthorized) {
    return;
  }
  
  try {
    const videoConfig = botConfig.options.videoProcessing;
    
    let message = `üìπ <b>Procesamiento de Videos</b>\n\n`;
    
    if (!videoConfig?.enabled) {
      message += `‚ùå <b>Estado:</b> Deshabilitado\n\n`;
      message += `üí° Para habilitar el procesamiento de videos, configura:\n`;
      message += `<code>videoProcessing.enabled = true</code> en bot.config.ts\n\n`;
      message += `üéØ <b>Beneficios del procesamiento:</b>\n`;
      message += `‚Ä¢ ‚úÖ Previsualizaciones en Telegram\n`;
      message += `‚Ä¢ ‚úÖ Reproducci√≥n inline\n`;
      message += `‚Ä¢ ‚úÖ Miniaturas correctas\n`;
      message += `‚Ä¢ üì¶ Archivos m√°s peque√±os\n`;
    } else {
      message += `‚úÖ <b>Estado:</b> Habilitado\n\n`;
      message += `‚öôÔ∏è <b>Configuraci√≥n actual:</b>\n`;
      message += `‚Ä¢ <b>Faststart:</b> ${videoConfig.faststart ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ <b>Recodificaci√≥n:</b> ${videoConfig.reencodeVideos ? 'Forzada' : 'Solo si es necesario'}\n`;
      message += `‚Ä¢ <b>Resoluci√≥n m√°xima:</b> ${videoConfig.maxResolution?.width}x${videoConfig.maxResolution?.height}\n`;
      message += `‚Ä¢ <b>Nivel de compresi√≥n:</b> CRF ${videoConfig.compressionLevel}\n`;
      message += `‚Ä¢ <b>Tama√±o m√°ximo:</b> ${Math.round(videoConfig.maxFileSize / (1024 * 1024))}MB\n`;
      message += `‚Ä¢ <b>Duraci√≥n m√°xima:</b> ${Math.round(videoConfig.maxDuration / 60)} minutos\n`;
      message += `‚Ä¢ <b>Omitir archivos peque√±os:</b> ${videoConfig.skipOptimizationForSmallFiles ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ <b>Mostrar progreso:</b> ${videoConfig.showProcessingProgress ? '‚úÖ' : '‚ùå'}\n\n`;
      
      message += `üéØ <b>Qu√© hace el procesamiento:</b>\n`;
      message += `‚Ä¢ üìπ Mueve metadatos al principio (faststart)\n`;
      message += `‚Ä¢ üîß Optimiza resoluci√≥n para Telegram\n`;
      message += `‚Ä¢ üì¶ Comprime videos grandes\n`;
      message += `‚Ä¢ ‚ö° Mejora velocidad de carga\n\n`;
      
      message += `üí° <b>Nota:</b> Los videos se procesan autom√°ticamente cuando se detectan URLs. No es necesario hacer nada adicional.`;
    }
    
    await ctx.reply(message, {
      parse_mode: "HTML",
      disable_notification: botConfig.options.silentReplies,
    });
    
  } catch (error) {
    console.error('Error obteniendo informaci√≥n de procesamiento de videos:', error);
    await ctx.reply("‚ùå Error obteniendo informaci√≥n de procesamiento de videos", {
      disable_notification: botConfig.options.silentReplies,
    });
  }
});

//This function would be added to the dispatcher as a handler for messages coming from the Bot API
bot.on("message", async (ctx) => {
  // Check if user is authorized to use the bot
  const isAuthorized = await isUserAuthorized(ctx);
  
  //Print to console if logging is enabled
  if (botConfig.options.logMessages) {
    console.log(
      `${ctx.from?.first_name} wrote ${
        "text" in ctx.message ? ctx.message.text : ""
      }`,
    );
  }

  // Verificar si el mensaje contiene URLs procesables
  if (ctx.message.text) {
    const urls = extractUrls(ctx.message.text);
    const processableUrls = urls.filter((url: string) => isProcessableUrl(url));
    
    // Handle all processable URLs (includes all social media, video sites, and more)
    if (processableUrls.length > 0) {
             // Use special authorization for processable links
       const shouldProcess = await shouldProcessProcessableUrls(ctx);
      if (!shouldProcess) {
        if (botConfig.options.logMessages) {
          console.log(`üö´ URL procesable rechazada: ${ctx.from?.first_name} (${ctx.from?.id})`);
        }
        return;
      }
      
      try {
        console.log("üîç URL procesable detectada, procesando...");
        
        // Process URLs that are traditional social media (Twitter, Instagram, TikTok) with the main handler
        const traditionalSocialMediaUrls = processableUrls.filter((url: string) => isSocialMediaUrl(url));
        if (traditionalSocialMediaUrls.length > 0) {
          await SocialMediaHandler.handleMessage(ctx);
          return;
        }
        
        // Process other URLs with download fallback if enabled
        if (botConfig.options.enableDownloadFallback && botConfig.options.downloadFallback.enabled) {
          for (const url of processableUrls) {
            await SocialMediaHandler.processSocialMediaUrl(ctx, url);
          }
          return;
        } else {
          // If download fallback is not enabled, show a helpful message
          await ctx.reply("üîó URL detectada pero el servicio de descarga universal est√° deshabilitado", {
            disable_notification: botConfig.options.silentReplies,
          });
          return;
        }
        
      } catch (error) {
        console.error('‚ùå Error handling processable URL:', error);
        // Continuar con el procesamiento normal si falla
      }
    }
  }

  // For non-social media messages, use normal authorization
  if (!isAuthorized) {
    // Silent rejection - don't respond to unauthorized users
    if (botConfig.options.logMessages) {
      console.log(`üö´ Usuario no autorizado: ${ctx.from?.first_name} (${ctx.from?.id})`);
    }
    return;
  }

  // Si no es un comando o una URL de redes sociales,
  // simplemente no hacer nada (no responder al mensaje)
});

// Global error handler
bot.catch((err) => {
  console.error('Bot error:', err);
  // Log the error but don't crash the bot
});

//Start the Bot
bot.start();
